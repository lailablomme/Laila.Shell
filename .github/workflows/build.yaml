name: Build and Publish Laila.Shell SampleApp2

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET Framework
        uses: microsoft/setup-msbuild@v2

      - name: Restore NuGet Packages
        run: nuget restore Laila.Shell.sln

      - name: Extract Version from Tag
        id: extract_version
        shell: pwsh
        run: |
          $version = "${{ github.ref_name }}"
          $isPrerelease = $version -match "alpha"
          Write-Output "version=$version" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          Write-Output "prerelease=$isPrerelease" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: Build WinRT dependency
        run: |
          msbuild Laila.Shell.WinRT/Laila.Shell.WinRT.csproj /p:Configuration=Release /p:Platform="x64" /m

      - name: Build and Pack Laila.Shell
        run: |
          msbuild Laila.Shell/Laila.Shell.vbproj /t:"Build;Pack" /p:Configuration=Release /p:Platform="x64" 

      - name: Build Laila.Shell.SampleApp1
        run: |
          msbuild Laila.Shell.SampleApp1/Laila.Shell.SampleApp1.vbproj /t:"Build" /p:Configuration=Release /p:Platform="x64" 

      - name: Build Laila.Shell.SampleApp2
        run: |
          msbuild Laila.Shell.SampleApp2/Laila.Shell.SampleApp2.vbproj /t:"Build" /p:Configuration=Release /p:Platform="x64" 

      - name: Find and import local .pfx certificate from project
        id: import_cert
        run: |
          $pfx = Get-ChildItem -Path "**/*.pfx" -Recurse | Select-Object -First 1
          if (-not $pfx) { throw "No .pfx file found in project." }

          Write-Output "Using certificate at: $($pfx.FullName)"

          $cert = Import-PfxCertificate -FilePath $pfx.FullName `
            -CertStoreLocation Cert:\CurrentUser\My `
            -Password (ConvertTo-SecureString -String "TEST1234" -AsPlainText -Force)

          Write-Output "Cert thumbprint: $($cert.Thumbprint)"
          "thumbprint=$($cert.Thumbprint)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: Build MSIX package for SampleApp2 (Developer Sideload)
        run: |
          msbuild Laila.Shell.SampleApp2.Package/Laila.Shell.SampleApp2.Package.wapproj `
            /t:Publish `
            /p:Configuration=Release `
            /p:Platform=x64 `
            /p:AppxBundle=Never `
            /p:GenerateAppInstallerFile=False `
            /p:BuildProjectReferences=false

      - name: Package SampleApp1
        run: |
          $outputDir = "./Laila.Shell.SampleApp1/bin/x64/Release/net6.0-windows7.0"
          $zipFile = "Laila.Shell.SampleApp1-${{ steps.extract_version.outputs.version }}.zip"
          Compress-Archive -Path "$outputDir/*" -DestinationPath "$zipFile"

      - name: Package SampleApp2
        run: |
          $outputDir = "./Laila.Shell.SampleApp2/bin/x64/Release/net6.0-windows7.0/win-x64"
          $zipFile = "Laila.Shell.SampleApp2-${{ steps.extract_version.outputs.version }}.zip"
          Compress-Archive -Path "$outputDir/*" -DestinationPath "$zipFile"

      - name: Package full MSIX deployment output (flattened for root zip)
        run: |
          $version = "${{ steps.extract_version.outputs.version }}"
          $appPackages = Get-ChildItem -Path "**/AppPackages" -Directory -Recurse | Sort-Object LastWriteTime -Descending | Select-Object -First 1
          if (-not $appPackages) { throw "No AppPackages folder found." }

          $subfolder = Get-ChildItem -Path $appPackages.FullName -Directory | Sort-Object LastWriteTime -Descending | Select-Object -First 1
          if (-not $subfolder) { throw "No subfolder found inside AppPackages." }

          $zipName = "Laila.Shell.SampleApp2-$version-AppX.zip"
          Compress-Archive -Path "$($subfolder.FullName)\*" -DestinationPath $zipName -Force

      - name: Upload SampleApp1 Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Laila.Shell.SampleApp1-${{ steps.extract_version.outputs.version }}
          path: ./Laila.Shell.SampleApp1/bin/x64/Release/net6.0-windows7.0/*

      - name: Upload SampleApp2 Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Laila.Shell.SampleApp2-${{ steps.extract_version.outputs.version }}
          path: ./Laila.Shell.SampleApp2/bin/x64/Release/net6.0-windows7.0/*

      - name: Upload Laila.Shell NuGet Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Laila.Shell-nuget-${{ steps.extract_version.outputs.version }}
          path: ./Laila.Shell/bin/x64/Release/*.nupkg

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        env:
         GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        with:
          tag_name: ${{ steps.extract_version.outputs.version }}
          name: Release ${{ steps.extract_version.outputs.version }}
          draft: false
          prerelease: ${{ steps.extract_version.outputs.prerelease }}
          files: |
            Laila.Shell.SampleApp1-${{ steps.extract_version.outputs.version }}.zip
            Laila.Shell.SampleApp2-${{ steps.extract_version.outputs.version }}.zip
            Laila.Shell.SampleApp2-${{ steps.extract_version.outputs.version }}-AppX.zip
            ./Laila.Shell/bin/x64/Release/*.nupkg

      - name: Publish NuGet package to nuget.org
        run: |
          nuget push **/bin/x64/Release/*.nupkg `
            -ApiKey ${{ secrets.PUSH_LAILA_SHELL }} `
            -Source https://api.nuget.org/v3/index.json `
            -SkipDuplicate
